using Godot;
using System;
using System.Collections.Generic;

namespace Automalithic.World
{
    /// <summary>
    /// Dual Contouring mesh generator for SVO-based chunks.
    /// </summary>
    public static class DualContourMeshGenerator
    {
        /// <summary>
        /// Represents a vertex generated by Dual Contouring.
        /// </summary>
        public struct DcVertex
        {
            public Vector3 Position;
            public Vector3 Normal;
        }

        /// <summary>
        /// Generates a mesh from the given SVO.
        /// </summary>
        /// <param name="root">The SVO root node.</param>
        /// <param name="origin">The world origin of the chunk.</param>
        /// <param name="voxelSize">The size of a single voxel.</param>
        /// <param name="outVerts">Output list of vertices.</param>
        /// <param name="outIndices">Output list of triangle indices.</param>
        public static void GenerateMeshFromSvo(
            Svo root, Vector3 origin, float voxelSize,
            out List<Vector3> outVerts, out List<int> outIndices)
        {
            outVerts = new List<Vector3>();
            outIndices = new List<int>();

            if (root == null || root.IsEmpty) return;

            foreach (var pt in root.GetSurfaceCrossings(origin, voxelSize))
            {
                outVerts.Add(pt);
            }

            for (int i = 0; i + 2 < outVerts.Count; i += 3)
            {
                outIndices.Add(i);
                outIndices.Add(i + 1);
                outIndices.Add(i + 2);
            }
        }
    }
}